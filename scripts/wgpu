#!/bin/bash

# Base directory for your Redis Worker instances
ROOT="${ROOT:-/workspace}"
LOG_DIR="${ROOT}/logs"
START_LOG="${LOG_DIR}/start.log"

# Ensure log directory exists
mkdir -p "$LOG_DIR"
chmod 755 "$LOG_DIR"
touch "$START_LOG"
chmod 644 "$START_LOG"

# [2025-04-15T16:25:23-04:00] Source environment variables from env.sh
load_environment_variables() {
    local log_prefix="$1"
    
    if [ -f "/etc/profile.d/env.sh" ]; then
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [$log_prefix] Loading environment variables from /etc/profile.d/env.sh"
        source "/etc/profile.d/env.sh"
    else
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [$log_prefix] WARNING: Environment file /etc/profile.d/env.sh not found"
        
        # Fallback to /etc/environment if env.sh doesn't exist
        if [ -f /etc/environment ]; then
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [$log_prefix] Falling back to /etc/environment"
            while IFS='=' read -r key value; do
                if [ -n "$key" ]; then
                    # Remove any leading/trailing whitespace and quotes
                    key=$(echo "$key" | tr -d '"' | xargs)
                    value=$(echo "$value" | tr -d '"' | xargs)
                    export "$key=$value"
                fi
            done < /etc/environment
        fi
    fi
}

# Load environment variables early
load_environment_variables "WGPU"

# Set NUM_GPUS with fallback to avoid errors
NUM_GPUS="${NUM_GPUS:-0}"
log() {
    local timestamp
    timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    local msg="[WGPU] $*"
    
    # Ensure log directory exists
    if [ ! -d "$LOG_DIR" ]; then
        mkdir -p "$LOG_DIR"
        chmod 755 "$LOG_DIR"
    fi
    
    # Ensure log file exists and is writable
    if [ ! -f "$START_LOG" ]; then
        touch "$START_LOG"
        chmod 644 "$START_LOG"
    fi
    
    if [ -w "$START_LOG" ]; then
        echo "[$timestamp] $msg" | tee -a "$START_LOG" >&2
    else
        echo "[$timestamp] $msg (Warning: Could not write to $START_LOG)" >&2
    fi
}

# Test logging at startup
log "WGPU script starting, log file: $START_LOG"

# Log environment variables
log "Environment: NUM_GPUS=$NUM_GPUS"
log "Using worker service for Redis workers"

# Validate GPU ID input
validate_gpu_id() {
    local gpu_id=$1
    if [ "$gpu_id" = "all" ]; then
        return 0
    fi
    if ! [[ "$gpu_id" =~ ^[0-9]+$ ]]; then
        log "Error: Invalid GPU ID '$gpu_id'. Must be a number or 'all'"
        return 1
    fi
    if [ "$gpu_id" -ge "${NUM_GPUS}" ]; then
        log "Error: GPU ID '$gpu_id' is out of range (0 to $((NUM_GPUS-1)))"
        return 1
    fi
    return 0
}

# Function to show logs
show_logs() {
    local gpu_id=$1
    local lines=${2:-100}
    local follow=${3:-0}
    
    validate_gpu_id "$gpu_id" || return 1
    
    local log_file="${ROOT}/worker_gpu${gpu_id}/logs/output.log"
    
    if [ ! -f "$log_file" ]; then
        log "No log file found for GPU $gpu_id at $log_file"
        return 1
    fi
    
    log "Showing logs for worker on GPU $gpu_id (${log_file})"
    
    if [ "$follow" -eq 1 ]; then
        tail -n "$lines" -f "$log_file"
    else
        tail -n "$lines" "$log_file"
    fi
}

# Function to show all logs
show_all_logs() {
    local lines=${1:-20}
    local follow=${2:-0}
    
    if [ "$NUM_GPUS" -eq 0 ]; then
        log "No GPUs configured. Check NUM_GPUS environment variable."
        return 1
    fi
    
    log "Showing last $lines lines of logs for all workers"
    
    for ((gpu=0; gpu<NUM_GPUS; gpu++)); do
        echo "=== GPU $gpu Logs ==="
        show_logs "$gpu" "$lines" 0
        echo ""
    done
    
    if [ "$follow" -eq 1 ]; then
        log "Cannot follow logs for multiple GPUs simultaneously. Please specify a single GPU."
    fi
}

# Function to start a specific GPU service
start_service() {
    local gpu_id=$1
    
    validate_gpu_id "$gpu_id" || return 1
    
    log "Starting Redis worker for GPU $gpu_id"
    service worker start "$gpu_id" || return 1
}

# Function to start all GPU services
start_all_services() {
    if [ "$NUM_GPUS" -eq 0 ]; then
        log "No GPUs configured. Check NUM_GPUS environment variable."
        return 1
    fi
    
    log "Starting Redis workers for all GPUs (0-$((NUM_GPUS-1)))"
    
    for ((gpu=0; gpu<NUM_GPUS; gpu++)); do
        start_service "$gpu"
    done
}

# Function to stop a specific GPU service
stop_service() {
    local gpu_id=$1
    
    validate_gpu_id "$gpu_id" || return 1
    
    log "Stopping Redis worker for GPU $gpu_id"
    service worker stop "$gpu_id" || return 1
}

# Internal function to stop a service
stop_service_internal() {
    service worker stop "$1"
}

# Function to stop all GPU services
stop_all_services() {
    if [ "$NUM_GPUS" -eq 0 ]; then
        log "No GPUs configured. Check NUM_GPUS environment variable."
        return 1
    fi
    
    log "Stopping Redis workers for all GPUs (0-$((NUM_GPUS-1)))"
    
    for ((gpu=0; gpu<NUM_GPUS; gpu++)); do
        stop_service "$gpu"
    done
}

# Function to restart a specific GPU service
restart_service() {
    local gpu_id=$1
    
    validate_gpu_id "$gpu_id" || return 1
    
    log "Restarting Redis worker for GPU $gpu_id"
    stop_service "$gpu_id"
    sleep 2
    start_service "$gpu_id"
    return $?
}

# Function to restart all GPU services
restart_all_services() {
    if [ "$NUM_GPUS" -eq 0 ]; then
        log "No GPUs configured. Check NUM_GPUS environment variable."
        return 1
    fi
    
    log "Restarting Redis workers for all GPUs (0-$((NUM_GPUS-1)))"
    
    for ((gpu=0; gpu<NUM_GPUS; gpu++)); do
        restart_service "$gpu"
    done
}

# Function to check status of a specific GPU service
check_status() {
    local gpu_id=$1
    
    validate_gpu_id "$gpu_id" || return 1
    
    log "Checking status of Redis worker for GPU $gpu_id"
    # Call worker script directly instead of using service command
    service worker status "$gpu_id" || return 1
}

# Function to check WebSocket connection status for a worker
check_websocket() {
    local gpu_id=$1
    
    validate_gpu_id "$gpu_id" || return 1
    
    local WORK_DIR="${ROOT}/worker_gpu${gpu_id}"
    local LOG_FILE="${WORK_DIR}/logs/output.log"
    
    log "Checking WebSocket connection status for worker on GPU $gpu_id"
    
    if [ ! -f "$LOG_FILE" ]; then
        log "ERROR: Log file not found: $LOG_FILE"
        return 1
    fi
    
    # Check for recent heartbeat messages
    local RECENT_HEARTBEATS=$(grep -a "HEARTBEAT SENT" "$LOG_FILE" | tail -n 5)
    
    if [ -z "$RECENT_HEARTBEATS" ]; then
        log "No heartbeat messages found in logs. Connection may be inactive."
        return 1
    fi
    
    # Check for WebSocket connection errors
    local RECENT_ERRORS=$(grep -a "Error sending heartbeat\|WebSocket connection closed\|connection is already closed" "$LOG_FILE" | tail -n 5)
    
    if [ -n "$RECENT_ERRORS" ]; then
        log "Recent WebSocket errors detected:"
        echo "$RECENT_ERRORS"
        return 1
    fi
    
    log "WebSocket connection appears to be active (recent heartbeats found)"
    echo "$RECENT_HEARTBEATS"
    return 0
}

# Function to check status of all GPU services
check_all_status() {
    if [ "$NUM_GPUS" -eq 0 ]; then
        log "No GPUs configured. Check NUM_GPUS environment variable."
        return 1
    fi
    
    log "Checking status of Redis workers for all GPUs (0-$((NUM_GPUS-1)))"
    
    for ((gpu=0; gpu<NUM_GPUS; gpu++)); do
        check_status "$gpu"
        echo ""
    done
}

# Function to setup Redis worker for a specific GPU
setup_gpu() {
    local gpu_id=$1
    
    validate_gpu_id "$gpu_id" || return 1
    
    local WORK_DIR="${ROOT}/worker_gpu${gpu_id}"
    
    log "Setting up Redis worker directory for GPU $gpu_id at $WORK_DIR"
    
    # Create worker directory
    mkdir -p "$WORK_DIR"
    mkdir -p "$WORK_DIR/logs"
    
    # Create empty log file
    touch "$WORK_DIR/logs/output.log"
    chmod 644 "$WORK_DIR/logs/output.log"
    
    # Create comprehensive .env file with all Redis connection variables
    cat > "$WORK_DIR/.env" <<EOF
# Redis Worker configuration for GPU ${gpu_id} - Created $(date)
# These environment variables are required for Redis connection

# Worker-specific configuration
WORKER_ID=worker-gpu${gpu_id}
CUDA_VISIBLE_DEVICES=${gpu_id}

# Redis connection settings
WORKER_REDIS_API_HOST=${WORKER_REDIS_API_HOST:-redisserver-production.up.railway.app}
WORKER_REDIS_API_PORT=${WORKER_REDIS_API_PORT:-}
WORKER_USE_SSL=true
WORKER_WEBSOCKET_AUTH_TOKEN=${WORKER_WEBSOCKET_AUTH_TOKEN:-3u8sdj5389fj3kljsf90u}

# Worker configuration
WORKER_CONNECTORS=${WORKER_CONNECTORS:-simulation,comfyui}
# [2025-05-19T12:55:00-04:00] Hardcoded values without variable substitution
WORKER_HEARTBEAT_INTERVAL=20
WORKER_LOG_LEVEL=INFO

# Simulation settings (if enabled)
WORKER_SIMULATION_JOB_TYPE=${WORKER_SIMULATION_JOB_TYPE:-simulation}
WORKER_SIMULATION_PROCESSING_TIME=${WORKER_SIMULATION_PROCESSING_TIME:-10}
WORKER_SIMULATION_STEPS=${WORKER_SIMULATION_STEPS:-5}
EOF

    # [2025-04-15T16:41:48-04:00] Dynamic port assignment for all WORKER_BASE_*_PORT variables
    # For every WORKER_BASE_*_PORT in env, generate WORKER_X_PORT = BASE + GPU_NUM
    # This ensures deterministic, future-proof port assignment for all worker services
    log "Adding dynamic port assignments to worker .env file"
    
    for base_var in $(env | grep -E '^WORKER_BASE_.*_PORT=' | cut -d= -f1); do
        # Extract the service name from WORKER_BASE_X_PORT
        service_name=$(echo "$base_var" | sed -E 's/^WORKER_BASE_(.*)_PORT$/\1/')
        # Get the base port value
        base_port=${!base_var}
        
        if [ -z "$base_port" ]; then
            log "WARNING: $base_var is defined but empty, skipping port assignment"
            continue
        fi
        
        # Compose new variable name: WORKER_X_PORT
        worker_port_var="WORKER_${service_name}_PORT"
        # Calculate port: base_port + gpu_id
        worker_port=$((base_port + gpu_id))
        
        # Add to .env file
        echo "$worker_port_var=$worker_port" >> "$WORK_DIR/.env"
        log "  Added $worker_port_var=$worker_port (from $base_var=$base_port + gpu_id=$gpu_id)"
    done
    
    log "Setup complete for Redis worker on GPU $gpu_id"
    return 0
}

# Function to setup all GPU directories
setup_all_gpus() {
    if [ "$NUM_GPUS" -eq 0 ]; then
        log "No GPUs configured. Check NUM_GPUS environment variable."
        return 1
    fi
    
    log "Setting up Redis worker directories for all GPUs (0-$((NUM_GPUS-1)))"
    
    for ((gpu=0; gpu<NUM_GPUS; gpu++)); do
        setup_gpu "$gpu"
    done
}

# Show usage information
show_usage() {
    echo "Usage: $0 COMMAND [GPU_ID|all]"
    echo ""
    echo "Commands:"
    echo "  start [GPU_ID|all]    Start Redis worker(s)"
    echo "  stop [GPU_ID|all]     Stop Redis worker(s)"
    echo "  restart [GPU_ID|all]  Restart Redis worker(s)"
    echo "  status [GPU_ID|all]   Check status of Redis worker(s)"
    echo "  logs [GPU_ID|all] [LINES] [FOLLOW]  Show logs for Redis worker(s)"
    echo "  setup [GPU_ID|all]    Setup Redis worker directories"
    echo "  update                Update worker to latest version"
    echo "  count                 Show number of GPUs configured"
    echo ""
    echo "Arguments:"
    echo "  GPU_ID    GPU ID number (0, 1, 2, ...)"
    echo "  all       Apply command to all GPUs"
    echo "  LINES     Number of log lines to show (default: 100 for single GPU, 20 for all)"
    echo "  FOLLOW    1 to follow logs, 0 to not follow (default: 0)"
    echo ""
    echo "Examples:"
    echo "  $0 start 0       Start Redis worker on GPU 0"
    echo "  $0 start all     Start Redis workers on all GPUs"
    echo "  $0 logs 1 50 1   Show and follow last 50 lines of logs for GPU 1"
    echo "  $0 setup all     Setup directories for all GPUs"
    echo "  $0 update        Update worker to latest version"
}

# Function to show GPU count
show_count() {
    if [ "$NUM_GPUS" -eq 0 ]; then
        log "No GPUs configured. Check NUM_GPUS environment variable."
    else
        log "Number of GPUs configured: $NUM_GPUS"
        log "GPU IDs available: 0-$((NUM_GPUS-1))"
    fi
}

# Function to update the worker to the latest version
update_worker() {
    log "Starting worker update process..."
    
    # Determine if we need to stop/restart workers
    local WORKERS_RUNNING=false
    for ((i=0; i<NUM_GPUS; i++)); do
        if check_status "$i" > /dev/null 2>&1; then
            WORKERS_RUNNING=true
            break
        fi
    done
    
    log "WORKERS_RUNNING: $WORKERS_RUNNING"

    # Stop workers if they're running
    if [ "$WORKERS_RUNNING" = true ]; then
        log "Stopping all workers before update..."
        stop_all_services
    fi
    
    # Create backup of current worker directories in a temporary location
    local TEMP_BACKUP_DIR="/tmp/worker-backup-$(date +%Y%m%d-%H%M%S)"
    log "Creating temporary backup at $TEMP_BACKUP_DIR"
    mkdir -p "$TEMP_BACKUP_DIR"
    
    # Backup each worker directory
    for ((i=0; i<NUM_GPUS; i++)); do
        local WORKER_DIR="${ROOT}/worker_gpu${i}"
        if [ -d "$WORKER_DIR" ]; then
            log "Backing up worker_gpu${i}..."
            # Create backup directory for this worker
            mkdir -p "$TEMP_BACKUP_DIR/worker_gpu${i}"
            
            # Copy important configuration files to backup
            if [ -f "$WORKER_DIR/.env" ]; then
                cp "$WORKER_DIR/.env" "$TEMP_BACKUP_DIR/worker_gpu${i}/" 2>/dev/null || true
            fi
            
            if [ -f "$WORKER_DIR/.pid" ]; then
                cp "$WORKER_DIR/.pid" "$TEMP_BACKUP_DIR/worker_gpu${i}/" 2>/dev/null || true
            fi
            
            # Backup logs directory if it exists
            if [ -d "$WORKER_DIR/logs" ]; then
                cp -r "$WORKER_DIR/logs" "$TEMP_BACKUP_DIR/worker_gpu${i}/" 2>/dev/null || true
            fi
        fi
    done
    
    # Create a temporary directory for the update process
    local TEMP_DIR="/tmp/worker-update-$(date +%s)"
    mkdir -p "$TEMP_DIR"
    
    # Extract just the setup_redis_workers function from start.sh
    log "Extracting setup_redis_workers function from start.sh"
    local START_SCRIPT="/scripts/start.sh"
    
    if [ ! -f "$START_SCRIPT" ]; then
        log "ERROR: Could not find start.sh script at $START_SCRIPT"
        if [ "$WORKERS_RUNNING" = true ]; then
            log "Restarting workers..."
            start_all_services
        fi
        rm -rf "$TEMP_DIR" "$TEMP_BACKUP_DIR"
        return 1
    fi
    
    # Extract just the setup_redis_workers function to a temporary file
    sed -n '/^setup_redis_workers()/,/^}/p' "$START_SCRIPT" > "$TEMP_DIR/setup_function.sh"
    
    if [ ! -s "$TEMP_DIR/setup_function.sh" ]; then
        log "ERROR: Could not extract setup_redis_workers function from $START_SCRIPT"
        if [ "$WORKERS_RUNNING" = true ]; then
            log "Restarting workers..."
            start_all_services
        fi
        rm -rf "$TEMP_DIR" "$TEMP_BACKUP_DIR"
        return 1
    fi
    
    # Source just the extracted function
    log "Sourcing setup_redis_workers function"
    source "$TEMP_DIR/setup_function.sh"
    
    # Check if the setup_redis_workers function is now available
    if ! declare -f setup_redis_workers > /dev/null; then
        log "ERROR: setup_redis_workers function not found in extracted file"
        if [ "$WORKERS_RUNNING" = true ]; then
            log "Restarting workers..."
            start_all_services
        fi
        rm -rf "$TEMP_DIR" "$TEMP_BACKUP_DIR"
        return 1
    fi
    
    # Run the setup_redis_workers function from the temporary directory
    log "Running setup_redis_workers function to download and install latest worker..."
    (
        cd "$TEMP_DIR"
        setup_redis_workers
    )
    
    # Check the return code of setup_redis_workers
    if [ $? -ne 0 ]; then
        log "ERROR: setup_redis_workers failed"
        if [ "$WORKERS_RUNNING" = true ]; then
            log "Restarting workers..."
            start_all_services
        fi
        rm -rf "$TEMP_DIR" "$TEMP_BACKUP_DIR"
        return 1
    fi
    
    # Move the backup to the final location if the update was successful
    local BACKUP_DIR="/worker-backup-$(date +%Y%m%d-%H%M%S)"
    mv "$TEMP_BACKUP_DIR" "$BACKUP_DIR"
    
    # Clean up temporary directory
    rm -rf "$TEMP_DIR"
    
    log "Update completed successfully!"
    log "Backup saved to: $BACKUP_DIR"
    
    # Restart workers if they were running before
    if [ "$WORKERS_RUNNING" = true ]; then
        log "Restarting workers..."
        start_all_services
    else
        log "Workers were not running before update. Use '$0 start all' to start them."
    fi
    
    return 0
}

# Main command handling
case "$1" in
    start)
        if [ -z "$2" ]; then
            show_usage
            exit 1
        elif [ "$2" = "all" ]; then
            start_all_services
        else
            start_service "$2"
        fi
        ;;
    stop)
        if [ -z "$2" ]; then
            show_usage
            exit 1
        elif [ "$2" = "all" ]; then
            stop_all_services
        else
            stop_service "$2"
        fi
        ;;
    restart)
        if [ -z "$2" ]; then
            show_usage
            exit 1
        elif [ "$2" = "all" ]; then
            restart_all_services
        else
            restart_service "$2"
        fi
        ;;
    status)
        if [ -z "$2" ]; then
            show_usage
            exit 1
        elif [ "$2" = "all" ]; then
            check_all_status
        else
            check_status "$2"
        fi
        ;;
    logs)
        # Parse flags for logs command
        local FOLLOW=0
        local ARGS=() # Store non-flag arguments
        
        # Skip the first argument (which is "logs")
        shift
        
        # Process remaining arguments
        while [ $# -gt 0 ]; do
            case "$1" in
                -f|--follow)
                    FOLLOW=1
                    shift
                    ;;
                *)
                    ARGS+=("$1")
                    shift
                    ;;
            esac
        done
        
        # Check if we have enough arguments
        if [ ${#ARGS[@]} -eq 0 ]; then
            show_usage
            exit 1
        elif [ "${ARGS[0]}" = "all" ]; then
            show_all_logs "${ARGS[1]:-20}" "$FOLLOW"
        else
            show_logs "${ARGS[0]}" "${ARGS[1]:-100}" "$FOLLOW"
        fi
        ;;
    setup)
        if [ -z "$2" ]; then
            show_usage
            exit 1
        elif [ "$2" = "all" ]; then
            setup_all_gpus
        else
            setup_gpu "$2"
        fi
        ;;
    count)
        show_count
        ;;
    websocket)
        if [ -z "$2" ]; then
            show_usage
            exit 1
        elif [ "$2" = "all" ]; then
            # Check websocket for all GPUs
            for ((gpu=0; gpu<NUM_GPUS; gpu++)); do
                check_websocket "$gpu"
                echo ""
            done
        else
            check_websocket "$2"
        fi
        ;;
    update)
        update_worker
        ;;
    *)
        show_usage
        exit 1
        ;;
esac

exit 0
