#!/bin/bash

# Base directory and logs
ROOT="${ROOT:-/workspace}"
LOG_DIR="${ROOT}/logs"
MAIN_LOG="${LOG_DIR}/start.log"
SERVICE_NAME="emp-redis-worker"

# Ensure log directory exists
mkdir -p "$LOG_DIR"
chmod 755 "$LOG_DIR"
touch "$MAIN_LOG"
chmod 644 "$MAIN_LOG"

# Source environment variables (especially NUM_GPUS)
if [ -f /etc/environment ]; then
    while IFS='=' read -r key value; do
        if [ -n "$key" ]; then
            key=$(echo "$key" | tr -d '"' | xargs)
            value=$(echo "$value" | tr -d '"' | xargs)
            export "$key=$value"
        fi
    done < /etc/environment
fi

# Check NUM_GPUS
if [ -z "${NUM_GPUS}" ] || ! [[ "${NUM_GPUS}" =~ ^[1-9][0-9]*$ ]]; then
    echo "[WorkerMgr] ERROR: NUM_GPUS environment variable is not set or invalid. Cannot manage workers." >&2
    # Try to detect if not set
    if command -v nvidia-smi &> /dev/null; then
        DETECTED_GPUS=$(nvidia-smi --list-gpus | wc -l)
        if [ "$DETECTED_GPUS" -gt 0 ]; then
             echo "[WorkerMgr] Detected $DETECTED_GPUS GPUs. Exporting NUM_GPUS=$DETECTED_GPUS" >&2
             export NUM_GPUS=$DETECTED_GPUS
        else
            echo "[WorkerMgr] nvidia-smi found but reported 0 GPUs. Exiting." >&2
             exit 1
        fi
    else
         echo "[WorkerMgr] nvidia-smi not found. Cannot detect GPU count. Exiting." >&2
         exit 1
    fi
fi

# Logging for the manager script
log() {
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    local msg="[WorkerMgr] $*"
    local log_line="[$timestamp] $msg"

    # Write to main start log if possible
    if [ -w "$MAIN_LOG" ]; then
        echo "$log_line" >> "$MAIN_LOG"
    fi
    # Always echo to stdout/stderr
    echo "$msg" >&2
}

# Validate GPU ID input
validate_gpu_id() {
    local gpu_id=$1
    if [ "$gpu_id" = "all" ]; then
        return 0
    fi
    if ! [[ "$gpu_id" =~ ^[0-9]+$ ]]; then
        log "Error: Invalid GPU ID '$gpu_id'. Must be a number or 'all'"
        return 1
    fi
    if [ "$gpu_id" -ge "${NUM_GPUS}" ]; then
        log "Error: GPU ID '$gpu_id' is out of range (0 to $((NUM_GPUS-1)))"
        return 1
    fi
    return 0
}

# Function to perform action on a specific GPU service
run_service_action() {
    local action=$1
    local gpu_id=$2
    log "Running: service $SERVICE_NAME $action $gpu_id"
    if ! service "$SERVICE_NAME" "$action" "$gpu_id"; then
        log "ERROR: Failed to run '$action' for worker on GPU $gpu_id"
        return 1
    fi
    return 0
}

# Function to perform action on all GPU services
run_all_services_action() {
    local action=$1
    local success=true
    log "Running '$action' for all $NUM_GPUS worker services..."
    for gpu in $(seq 0 $((NUM_GPUS-1))); do
        if ! run_service_action "$action" "$gpu"; then
            success=false
            # Continue with others even if one fails?
            # For start/stop/restart, maybe stop on first failure?
            # For status, continue.
            if [ "$action" != "status" ]; then
                log "Stopping operation due to failure on GPU $gpu."
                return 1 # Optionally stop processing remaining GPUs
            fi
        fi
    done
    if [ "$success" = false ]; then
        log "Warning: One or more worker services failed the '$action' action."
        return 1
    fi
    log "Action '$action' completed for all worker services."
    return 0
}

# Function to show logs (optional, basic implementation)
show_logs() {
    local gpu_id=$1
    local LOG_FILE="${ROOT}/worker_gpu${gpu_id}/logs/output.log"

    if [ ! -f "$LOG_FILE" ]; then
        log "ERROR: Log file not found for GPU $gpu_id: $LOG_FILE"
        return 1
    fi
    log "Showing logs for GPU $gpu_id (Ctrl+C to exit):"
    tail -f "$LOG_FILE"
}

show_all_logs() {
     if ! command -v multitail >/dev/null 2>&1; then
        log "ERROR: multitail is not installed. Cannot show combined logs."
        log "Showing logs individually..."
        for gpu in $(seq 0 $((NUM_GPUS-1))); do
            show_logs "$gpu"
            log "------------------------------------"
        done
        return 1
    fi

    local colors=("green" "yellow" "blue" "magenta" "cyan" "red" "white" "purple")
    local cmd="multitail --mergeall -m 5000"
    local found_logs=false

    for gpu in $(seq 0 $((NUM_GPUS-1))); do
        local log_file="${ROOT}/worker_gpu${gpu}/logs/output.log"
        if [ -f "$log_file" ]; then
            local color_index=$((gpu % ${#colors[@]}))
            cmd="$cmd -ci ${colors[$color_index]} --label \"Wkr${gpu}: \" $log_file"
            found_logs=true
        fi
    done

    if [ "$found_logs" = false ]; then
        log "ERROR: No worker log files found."
        return 1
    fi

    log "Starting combined log view (Press 'b' to scroll, 'q' to exit scroll mode, Ctrl+C to exit)"
    eval "$cmd"
}

# Show usage information
show_usage() {
    echo "Usage: $0 {start|stop|restart|status|logs} {<gpu_id>|all}"
    echo "  Commands:"
    echo "    start   - Start worker service(s)"
    echo "    stop    - Stop worker service(s)"
    echo "    restart - Restart worker service(s)"
    echo "    status  - Check status of worker service(s)"
    echo "    logs    - Show logs for worker service(s) (requires multitail for 'all')"
    echo "  Arguments:"
    echo "    <gpu_id> - Specific GPU index (0 to $((NUM_GPUS-1)))"
    echo "    all      - Apply command to all detected GPUs ($NUM_GPUS)"
}

# Main command handling
COMMAND=$1
TARGET=$2

if [ -z "$COMMAND" ] || [ -z "$TARGET" ]; then
    show_usage
    exit 1
fi

if ! validate_gpu_id "$TARGET"; then
    exit 1
fi

case "$COMMAND" in
    start|stop|restart|status)
        if [ "$TARGET" = "all" ]; then
            run_all_services_action "$COMMAND"
        else
            run_service_action "$COMMAND" "$TARGET"
        fi
        exit $?
        ;;
    logs)
         if [ "$TARGET" = "all" ]; then
            show_all_logs
        else
            show_logs "$TARGET"
        fi
        exit $?
        ;;
    *)
        log "Error: Invalid command '$COMMAND'"
        show_usage
        exit 1
        ;;
esac
